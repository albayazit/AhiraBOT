from cgitb import text
from aiogram import Dispatcher, types, Bot
from create_bot import dp
from keyboards import client_kb
from parcer import parcer_exel, parcer_hidjra, parcer_main
from handlers import other
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import sqlite_bd

# FSM
class FSMaddress(StatesGroup):
	address = State()
	method = State()
	school = State()

# –º–∞–∫—Å. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
MESS_MAX_LENGTH = 4096
# —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –∏–Ω–ª–∞–π–Ω–µ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–∞
tat_page = 1
# –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ —Ö–∏–¥–∂—Ä–µ
hidjra_date = parcer_hidjra.main()
# –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–∞–∑–∞–Ω—å
current_city = '–ö–∞–∑–∞–Ω—å'

# —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ /start
async def start_command(message: types.Message):
    await message.answer('ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá', reply_markup=client_kb.markup_main)


# –∫–Ω–æ–ø–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞
async def favorite_command(message: types.Message):
		user_id = message.from_user.id
		await message.answer('<b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:</b>', reply_markup=client_kb.favorite_cities(user_id))

async def time_command(callback : types.CallbackQuery):
    await callback.message.edit_text('–í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å–¥–µ–ª–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –í—Å–µ–º–∏—Ä–Ω–æ–π –ò—Å–ª–∞–º—Å–∫–æ–π –ª–∏–≥–∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—á–µ—Ç—ã –î–£–ú –í–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:</b> ', reply_markup=client_kb.inline_namaz_time)


# –∫–Ω–æ–ø–∫–∞ —Ç—Ä–µ–∫–µ—Ä
async def tracker_command(message: types.Message):
    await message.answer('–≠—Ç–æ —Ç—Ä–µ–∫–µ—Ä')


# –∫–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞–º–∞–∑—É
async def tutor_command(message: types.Message):
    await message.answer('–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –•–∞–Ω–∞—Ñ–∏—Ç—Å–∫–æ–≥–æ –º–∞–∑—Ö–∞–±–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=client_kb.markup_namaz_tutor)
# –∫–Ω–æ–ø–∫–∏ –æ–±—É—á–µ–Ω–∏–π
async def tutor_namaz_command(message: types.Message):
    await message.answer(other.tut_namaz_message)

async def tutor_time_command(message: types.Message):
    await message.answer(other.tut_time_message)

async def tutor_cond_command(message: types.Message):
	for x in range(0, len(other.tut_cond_message), MESS_MAX_LENGTH - 1400):
		mess_tut = other.tut_cond_message[x: x + MESS_MAX_LENGTH - 1400] 
		await message.answer(mess_tut)

async def tutor_gusl_command(message: types.Message):
    await message.answer(other.tut_gusl_message)

async def tutor_taharat_command(message: types.Message):
    await message.answer(other.tut_taharat_message)

async def tutor_forma_command(message: types.Message):
	for x in range(0, len(other.tut_forma_message), MESS_MAX_LENGTH - 57):
		mess_form = other.tut_forma_message[x: x + MESS_MAX_LENGTH - 57] 
		await message.answer(mess_form)

async def tutor_sura_command(message: types.Message):
    await message.answer(other.tut_sura_message)

async def tutor_women_command(message: types.Message):
    await message.answer(other.tut_women_message)


# –∫–Ω–æ–ø–∫–∞ –∞—É–¥–∏–æ
async def audio_command(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=client_kb.markup_audio)


# –∫–Ω–æ–ø–∫–∞ –∫–Ω–∏–≥
async def books_command(message: types.Message):
    await message.answer('–ö–Ω–∏–≥–∏')


# –∫–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
async def calendar_command(message: types.Message):
    await message.answer(other.calendar_message)


# –∫–Ω–æ–ø–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def info_command(message: types.Message):
    await message.answer(other.info_message)


# –∫–Ω–æ–ø–∫–∞ –∑–∏–∫—Ä–∞
async def zikr_command(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∏–∫—Ä: ', reply_markup=client_kb.inline_zikr_all)


# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def help_command(message: types.Message):
	await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=client_kb.markup_main)


# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ (–ø–µ—Ä–µ–±—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏)
async def back_command(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=client_kb.markup_main)


# –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def namaz_day_command(callback : types.CallbackQuery):
	global current_city
	current_city = callback.data
	await callback.message.edit_text(parcer_exel.get_day_time(current_city), reply_markup = client_kb.inline_city('today', current_city))
	await callback.answer()


# –í—Ä–µ–º—è –Ω–∞ —Å–ª–µ–¥. –¥–µ–Ω—å
async def next_day_time_command(callback : types.CallbackQuery):
	global current_city
	await callback.message.edit_text(parcer_exel.get_nextday_time(current_city), reply_markup = client_kb.inline_city('tomorrow', current_city))
	await callback.answer()

# –í—Ä–µ–º—è –Ω–∞ –º–µ—Å—è—Ü
async def month_time_command(callback : types.CallbackQuery):
	await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:</b>', reply_markup=client_kb.inline_month())


# –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–∞ inline-button
async def tatarstan_command(callback : types.CallbackQuery):
	global tat_page
	await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à <b>–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:</b> ', reply_markup=client_kb.inline_namaz_time_tat(tat_page))
	await callback.answer()

async def tatarstan_next(callback : types.CallbackQuery):
	global tat_page
	tat_page += 1
	await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à <b>–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:</b> ', reply_markup=client_kb.inline_namaz_time_tat(tat_page))
	await callback.answer()

async def tatarstan_back(callback : types.CallbackQuery):
	global tat_page
	tat_page -= 1
	await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à <b>–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:</b> ', reply_markup=client_kb.inline_namaz_time_tat(tat_page))
	await callback.answer()

async def address_add(callback: types.CallbackQuery):
	await FSMaddress.address.set()
	await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
	await callback.answer()

async def address_get(message: types.message, state=FSMContext):
	try:
		await parcer_main.city_check(message.text)
	except:
		await state.finish()
		return await message.answer('–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!')
	async with state.proxy() as data:
		data['address'] = message.text
	await FSMaddress.method.set()
	await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞:</b>', reply_markup=client_kb.markup_method)

async def method_get(callback: types.CallbackQuery, state=FSMContext):
	async with state.proxy() as data:
		data['method'] = callback.data[7:]
	await FSMaddress.school.set()
	await callback.answer()
	await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∑—Ö–∞–±:</b>', reply_markup=client_kb.markup_school)

async def school_get(callback: types.CallbackQuery, state=FSMContext):
	global address, method, school
	user_id = callback.from_user.id
	async with state.proxy() as data:
		data['school'] = callback.data[7]
		address = data['address']
		method = data['method']
		school = data['school']
	await callback.answer()
	await callback.message.edit_text(await parcer_main.get_day_time(state), reply_markup=client_kb.other_inline(user_id, address))
	await state.finish()

async def time_other(callback: types.CallbackQuery):
	user_id = callback.from_user.id
	address = str(callback.data[11:])
	try:
		await callback.message.edit_text(await parcer_main.get_day_time_from_menu(user_id, str(callback.data[11:])),reply_markup=client_kb.other_inline(user_id, str(callback.data[11:])))
	except:
		await callback.message.edit_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!')
	await callback.answer()

async def favorite_add_other(callback: types.CallbackQuery):
	user_id = callback.from_user.id
	sqlite_bd.cur.execute('INSERT INTO favorite_other VALUES (?, ?, ?, ?)', (user_id, address, method, school))
	sqlite_bd.base.commit()
	await callback.message.edit_text('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ‚úÖ')
	await callback.answer()

async def favorite_delete_other(callback: types.CallbackQuery):
	user_id = callback.from_user.id
	sqlite_bd.cur.execute('DELETE FROM favorite_other WHERE user_id == ? AND address == ?', (user_id, address))
	sqlite_bd.base.commit()
	await callback.message.edit_text('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö ‚úÖ')
	await callback.answer()

# dispatcher
def register_handlers_client(dp : Dispatcher):
	dp.register_message_handler(start_command, commands=['start'])
	dp.register_message_handler(favorite_command, lambda message: message.text == "üï¶ –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞")
	dp.register_message_handler(tracker_command, lambda message: message.text == "üìà –¢—Ä–µ–∫–µ—Ä")
	dp.register_message_handler(tutor_command, lambda message: message.text == "üïå –û–±—É—á–µ–Ω–∏–µ")
	dp.register_message_handler(tutor_namaz_command, lambda message: message.text == "‚ùì\n –ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–º–∞–∑")
	dp.register_message_handler(tutor_time_command, lambda message: message.text == "üï¶\n –í—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤")
	dp.register_message_handler(tutor_cond_command, lambda message: message.text == "‚ùó\n –£—Å–ª–æ–≤–∏—è –Ω–∞–º–∞–∑–∞")
	dp.register_message_handler(tutor_gusl_command, lambda message: message.text == "üöø\n –ì—É—Å–ª—å")
	dp.register_message_handler(tutor_taharat_command, lambda message: message.text == "üíß\n –¢–∞—Ö–∞—Ä–∞—Ç")	
	dp.register_message_handler(tutor_forma_command, lambda message: message.text == "üßé\n –§–æ—Ä–º–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞")	
	dp.register_message_handler(tutor_sura_command, lambda message: message.text == "üìÉ\n –°—É—Ä—ã –∏ –¥—É–∞ –Ω–∞–º–∞–∑–∞")
	dp.register_message_handler(tutor_women_command, lambda message: message.text == "üßï\n –ñ–µ–Ω—Å–∫–∏–π –Ω–∞–º–∞–∑")					
	dp.register_message_handler(audio_command, lambda message: message.text == "üéß –ê—É–¥–∏–æ")
	dp.register_message_handler(books_command, lambda message: message.text == "üìö –ö–Ω–∏–≥–∏")
	dp.register_message_handler(calendar_command, lambda message: message.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
	dp.register_message_handler(info_command, lambda message: message.text == "‚ùó –ü–æ–º–æ—â—å")
	dp.register_message_handler(zikr_command, lambda message: message.text == "üìø –ó–∏–∫—Ä")
	dp.register_message_handler(help_command, commands=['help'])
	dp.register_message_handler(back_command, lambda message: message.text == "‚è™ –ù–∞–∑–∞–¥")
	dp.register_callback_query_handler(time_command, text = 'add_city')
	dp.register_callback_query_handler(namaz_day_command, text = parcer_exel.cities_exel)
	dp.register_callback_query_handler(next_day_time_command, text = 'tomorrow_time')
	dp.register_callback_query_handler(tatarstan_command, text = 'tatarstan')
	dp.register_callback_query_handler(tatarstan_next, text = 'next_tat')
	dp.register_callback_query_handler(tatarstan_back, text = 'back_tat')
	dp.register_callback_query_handler(month_time_command, text = 'month_time')
	dp.register_callback_query_handler(address_add, text = 'other_region')
	dp.register_message_handler(address_get, state=FSMaddress.address)
	dp.register_callback_query_handler(method_get, text_startswith='method_',state=FSMaddress.method)
	dp.register_callback_query_handler(school_get, text_startswith='school_',state=FSMaddress.school)
	dp.register_callback_query_handler(favorite_add_other, text='other_add')
	dp.register_callback_query_handler(favorite_delete_other, text='other_delete')
	dp.register_callback_query_handler(time_other, text_startswith='city_other_')
	